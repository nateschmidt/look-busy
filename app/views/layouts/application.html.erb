<!DOCTYPE html>
<html>
  <head>
    <title>LookBusy</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/js/bootstrap.bundle.min.js"></script>
    
    <style>
      :root {
        --bs-body-bg: #f8f9fa;
        --bs-body-color: #495057;
        --bs-card-bg: #ffffff;
        --bs-card-border-color: rgba(0, 0, 0, 0.08);
        --bs-navbar-bg: #000000;
        --bs-navbar-color: #ffffff;
        --bs-footer-bg: #e9ecef;
        --bs-footer-color: #6c757d;
        --meeting-bg: #e3f2fd;
        --goal-bg: #e8f5e8;
        --adhoc-bg: #fff3cd;
      }

      [data-bs-theme="dark"] {
        --bs-body-bg: #1a1a1a;
        --bs-body-color: #b0b0b0;
        --bs-card-bg: #2d2d2d;
        --bs-card-border-color: #404040;
        --bs-navbar-bg: #000000;
        --bs-navbar-color: #ffffff;
        --bs-footer-bg: #2d2d2d;
        --bs-footer-color: #b0b0b0;
        --meeting-bg: #1a3a4a;
        --goal-bg: #1a3a1a;
        --adhoc-bg: #3a2a1a;
      }

      body {
        background-color: var(--bs-body-bg) !important;
        color: var(--bs-body-color) !important;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      .card {
        background-color: var(--bs-card-bg) !important;
        border-color: var(--bs-card-border-color) !important;
        transition: background-color 0.3s ease, border-color 0.3s ease;
      }

      .navbar {
        background-color: var(--bs-navbar-bg) !important;
        color: var(--bs-navbar-color) !important;
      }

      .footer {
        background-color: var(--bs-footer-bg) !important;
        color: var(--bs-footer-color) !important;
      }

      .dark-mode-toggle {
        background: none;
        border: none;
        color: var(--bs-navbar-color);
        font-size: 1.2rem;
        padding: 0.5rem;
        border-radius: 0.375rem;
        transition: background-color 0.2s ease;
      }

      .dark-mode-toggle:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }

      .dark-mode-toggle:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.25);
      }
    </style>
    
    <script>
      // Dark mode functionality
      function initDarkMode() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-bs-theme', savedTheme);
        updateDarkModeIcon(savedTheme);
      }

      function toggleDarkMode() {
        const currentTheme = document.documentElement.getAttribute('data-bs-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-bs-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateDarkModeIcon(newTheme);
      }

      function updateDarkModeIcon(theme) {
        const toggleBtn = document.getElementById('dark-mode-toggle');
        if (toggleBtn) {
          const icon = toggleBtn.querySelector('i');
          if (icon) {
            icon.className = theme === 'dark' ? 'bi bi-sun-fill' : 'bi bi-moon-fill';
          }
        }
      }

      // Initialize dark mode on page load
      document.addEventListener('DOMContentLoaded', initDarkMode);
      document.addEventListener('turbo:load', initDarkMode);
      function updateFormFields() {
        const frequencySelect = document.getElementById('frequency-select');
        if (!frequencySelect) return;
        
        const frequency = frequencySelect.value;
        
        // Get all the cards and headers
        const biweeklyCard = document.getElementById('biweekly-card');
        const biweeklyHeader = document.getElementById('biweekly-header');
        const weekOfMonthCard = document.getElementById('week-of-month-card');
        const weekOfMonthHeader = document.getElementById('week-of-month-header');
        const monthOfQuarterCard = document.getElementById('month-of-quarter-card');
        const monthOfQuarterHeader = document.getElementById('month-of-quarter-header');
        
        // Reset all cards to inactive state
        [biweeklyCard, weekOfMonthCard, monthOfQuarterCard].forEach(card => {
          if (card) {
            card.className = 'card border-secondary';
            card.style.opacity = '0.5';
          }
        });
        
        [biweeklyHeader, weekOfMonthHeader, monthOfQuarterHeader].forEach(header => {
          if (header) {
            header.className = 'card-header bg-secondary text-white';
          }
        });
        
        // Activate relevant cards based on frequency
        switch(frequency) {
          case 'bi_weekly':
            if (biweeklyCard) {
              biweeklyCard.className = 'card border-primary';
              biweeklyCard.style.opacity = '1';
            }
            if (biweeklyHeader) {
              biweeklyHeader.className = 'card-header bg-primary text-white';
            }
            break;
          case 'monthly':
            if (weekOfMonthCard) {
              weekOfMonthCard.className = 'card border-primary';
              weekOfMonthCard.style.opacity = '1';
            }
            if (weekOfMonthHeader) {
              weekOfMonthHeader.className = 'card-header bg-primary text-white';
            }
            break;
          case 'quarterly':
            if (weekOfMonthCard) {
              weekOfMonthCard.className = 'card border-primary';
              weekOfMonthCard.style.opacity = '1';
            }
            if (weekOfMonthHeader) {
              weekOfMonthHeader.className = 'card-header bg-primary text-white';
            }
            if (monthOfQuarterCard) {
              monthOfQuarterCard.className = 'card border-primary';
              monthOfQuarterCard.style.opacity = '1';
            }
            if (monthOfQuarterHeader) {
              monthOfQuarterHeader.className = 'card-header bg-primary text-white';
            }
            break;
          case 'weekly':
            // All cards stay inactive for weekly
            break;
        }
      }
      
      // Run on page load
      document.addEventListener('DOMContentLoaded', updateFormFields);
      document.addEventListener('turbo:load', updateFormFields);
      
      // Run when frequency changes
      document.addEventListener('DOMContentLoaded', function() {
        const frequencySelect = document.getElementById('frequency-select');
        if (frequencySelect) {
          frequencySelect.addEventListener('change', updateFormFields);
        }
      });
      
      document.addEventListener('turbo:load', function() {
        const frequencySelect = document.getElementById('frequency-select');
        if (frequencySelect) {
          frequencySelect.addEventListener('change', updateFormFields);
        }
      });
    </script>
    
        <script>
      // Todo card interactions with note modal
      document.addEventListener('DOMContentLoaded', function() {
        setupTodoInteractions();
      });

      // Also run when Turbo loads the page
      document.addEventListener('turbo:load', function() {
        setupTodoInteractions();
      });

      function setupTodoInteractions() {
        console.log('Setting up todo interactions...');
        const todoCheckboxes = document.querySelectorAll('.todo-checkbox');
        console.log('Found', todoCheckboxes.length, 'checkboxes');

        // Simple checkbox change handlers - no modal interaction
        todoCheckboxes.forEach(function(checkbox) {
          checkbox.addEventListener('change', function(e) {
            console.log('Checkbox changed:', this.checked);
            const todoId = this.dataset.todoId;
            
            // Update the todo item directly
            updateTodoItem(todoId, this.checked);
          });
        });

        // Handle modal form submission
        const noteForm = document.getElementById('noteForm');
        if (noteForm) {
          noteForm.addEventListener('submit', function() {
            // The form will submit normally and redirect back to the dashboard
            // The note will be created/updated without affecting the todo completion status
          });
        }

        // Handle modal cleanup when dismissed
        const noteModal = document.getElementById('noteModal');
        if (noteModal) {
          noteModal.addEventListener('hidden.bs.modal', function() {
            cleanupModal();
            
            // Reset form
            const form = document.getElementById('noteForm');
            if (form) {
              form.reset();
              form.action = '/notes';
              form.method = 'POST';
            }
            
            // Reset modal title
            const modalTitle = document.getElementById('noteModalLabel');
            if (modalTitle) {
              modalTitle.innerHTML = '<i class="bi bi-journal-text me-2"></i>Add Completion Notes (Optional)';
            }
            
            // Reset submit button
            const submitButton = document.querySelector('#noteModal input[type="submit"]');
            if (submitButton) {
              submitButton.value = 'Complete Task';
            }
          });
          
          // Handle clicking outside modal or pressing escape
          noteModal.addEventListener('click', function(e) {
            if (e.target === noteModal) {
              const modal = bootstrap.Modal.getInstance(noteModal);
              if (modal) {
                modal.hide();
              }
            }
          });
        }
      }

        // Test modal functionality
        const modalElement = document.getElementById('noteModal');
        if (modalElement) {
          console.log('Modal element found');
          // Test if Bootstrap is available
          if (typeof bootstrap !== 'undefined') {
            console.log('Bootstrap is available');
          } else {
            console.error('Bootstrap is not available');
          }
        } else {
          console.error('Modal element not found');
        }

        // Handle view/edit notes buttons for completed tasks
        document.addEventListener('click', function(e) {
          if (e.target.closest('.view-notes-btn')) {
            e.preventDefault();
            const button = e.target.closest('.view-notes-btn');
            const todoId = button.dataset.todoId;
            const notes = button.dataset.notes;
            
            console.log('View notes clicked for todo:', todoId, 'notes:', notes);
            showNotesModal(todoId, notes, true);
          } else if (e.target.closest('.add-notes-btn')) {
            e.preventDefault();
            const button = e.target.closest('.add-notes-btn');
            const todoId = button.dataset.todoId;
            
            console.log('Add notes clicked for todo:', todoId);
            showNotesModal(todoId, '', false);
          }
        });

        // Global cleanup for stuck modals (emergency fix)
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape') {
            cleanupModal();
          }
        });

        function showNotesModal(todoId, notes, isEditing) {
          console.log('showNotesModal called with:', { todoId, notes, isEditing });
          
          const modalElement = document.getElementById('noteModal');
          const modalTitle = document.getElementById('noteModalLabel');
          const noteContent = document.querySelector('#noteModal textarea[name="note[content]"]');
          const submitButton = document.querySelector('#noteModal input[type="submit"]');
          const notableTypeField = document.getElementById('note_notable_type');
          const notableIdField = document.getElementById('note_notable_id');
          const noteIdField = document.getElementById('note_id');
          
          console.log('Modal elements found:', {
            modalElement: !!modalElement,
            modalTitle: !!modalTitle,
            noteContent: !!noteContent,
            submitButton: !!submitButton,
            notableTypeField: !!notableTypeField,
            notableIdField: !!notableIdField,
            noteIdField: !!noteIdField
          });
          
          // Clean up any existing modal state first
          cleanupModal();
          
          if (modalElement && modalTitle && noteContent && submitButton) {
            // Set modal title
            modalTitle.innerHTML = isEditing ? 
              '<i class="bi bi-journal-text me-2"></i>Edit Notes' : 
              '<i class="bi bi-journal-text me-2"></i>Add Notes';
            
            // Set form action and method
            const form = document.getElementById('noteForm');
            if (isEditing && notes) {
              // For editing, we need to find the existing note
              fetch(`/todo_items/${todoId}/notes`)
                .then(response => response.json())
                .then(data => {
                  console.log('Fetched notes data:', data);
                  if (data.notes && data.notes.length > 0) {
                    const note = data.notes[0];
                    form.action = `/notes/${note.id}`;
                    form.method = 'PATCH';
                    noteContent.value = note.content;
                    notableTypeField.value = 'TodoItem';
                    notableIdField.value = todoId;
                    noteIdField.value = note.id;
                  }
                })
                .catch(error => {
                  console.error('Error fetching notes:', error);
                  // Fallback to adding new note
                  form.action = '/notes';
                  form.method = 'POST';
                  noteContent.value = notes;
                  notableTypeField.value = 'TodoItem';
                  notableIdField.value = todoId;
                });
            } else {
              // For adding new note
              form.action = '/notes';
              form.method = 'POST';
              noteContent.value = '';
              notableTypeField.value = 'TodoItem';
              notableIdField.value = todoId;
            }
            
            // Update button text
            submitButton.value = isEditing ? 'Update Notes' : 'Add Notes';
            
            // Show the modal
            console.log('About to show modal...');
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
            console.log('Modal show() called');
          } else {
            console.error('Required modal elements not found');
          }
        }



        function cleanupModal() {
          // Remove any existing modal backdrops
          const backdrops = document.querySelectorAll('.modal-backdrop');
          backdrops.forEach(backdrop => backdrop.remove());
          
          // Remove modal-open class from body
          document.body.classList.remove('modal-open');
          document.body.style.overflow = '';
          document.body.style.paddingRight = '';
        }

        function testModal() {
          console.log('Test modal function called');
          const modalElement = document.getElementById('noteModal');
          if (modalElement) {
            console.log('Modal element found, showing...');
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
            console.log('Test modal show() called');
          } else {
            console.error('Modal element not found in test');
          }
        }

        // Function to update todo item completion status directly
        function updateTodoItem(todoId, completed) {
          console.log('updateTodoItem called with:', { todoId, completed });
          
          const formData = new FormData();
          formData.append('todo_item[completed]', completed);
          formData.append('authenticity_token', document.querySelector('meta[name="csrf-token"]').content);
          
          console.log('Sending request to:', `/todo_items/${todoId}`);
          console.log('Form data:', Object.fromEntries(formData));
          
          fetch(`/todo_items/${todoId}`, {
            method: 'PATCH',
            body: formData,
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => {
            console.log('Response status:', response.status);
            console.log('Response ok:', response.ok);
            
            if (response.ok) {
              return response.json();
            } else {
              throw new Error('Network response was not ok');
            }
          })
          .then(data => {
            console.log('Response data:', data);
            
            if (data.success) {
              console.log('Request successful, reloading page...');
              // Reload the page to update goal statistics and UI
              window.location.reload();
            } else {
              console.error('Failed to update todo item:', data.errors);
              // Revert the checkbox state
              const checkbox = document.querySelector(`input[data-todo-id="${todoId}"]`);
              checkbox.checked = !completed;
            }
          })
          .catch(error => {
            console.error('Error updating todo item:', error);
            // Revert the checkbox state
            const checkbox = document.querySelector(`input[data-todo-id="${todoId}"]`);
            checkbox.checked = !completed;
          });
        }
      </script>
  </head>

  <body class="<%= @body_class %> d-flex flex-column min-vh-100">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm">
      <div class="container">
        <a class="navbar-brand fw-bold" href="/">
          <i class="bi bi-clock me-2"></i>Look Busy
        </a>
        
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link" href="/">Home</a>
            </li>
            <% if user_signed_in? %>
              <li class="nav-item">
                <%= link_to "Weekly", weekly_dashboard_path, class: "nav-link" %>
              </li>
              <li class="nav-item">
                <%= link_to "Meetings", recurring_meetings_path, class: "nav-link" %>
              </li>
              <li class="nav-item">
                <%= link_to "Goals", goals_path, class: "nav-link" %>
              </li>
            <% end %>
          </ul>
          
          <ul class="navbar-nav">
            <!-- Dark Mode Toggle -->
            <li class="nav-item">
              <button id="dark-mode-toggle" class="dark-mode-toggle" onclick="toggleDarkMode()" title="Toggle dark mode">
                <i class="bi bi-moon-fill"></i>
              </button>
            </li>
            
            <% if user_signed_in? %>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class="bi bi-person-circle me-1"></i><%= current_user.email %>
                </a>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                  <li><%= link_to "Profile", "#", class: "dropdown-item" %></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><%= link_to "Logout", destroy_user_session_path, method: :delete, class: "dropdown-item" %></li>
                </ul>
              </li>
            <% else %>
              <li class="nav-item">
                <%= link_to "Login", new_user_session_path, class: "nav-link" %>
              </li>
            <% end %>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Flash Messages -->
    <% if notice %>
      <div class="alert alert-info alert-dismissible fade show m-3" role="alert">
        <i class="bi bi-info-circle me-2"></i><%= notice %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% end %>
    
    <% if alert %>
      <div class="alert alert-danger alert-dismissible fade show m-3" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i><%= alert %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% end %>

    <!-- Main Content -->
    <main class="flex-grow-1">
      <%= yield %>
    </main>

    <!-- Footer -->
    <footer class="footer mt-auto py-3">
      <div class="container text-center">
        <span class="text-muted">
          <i class="bi bi-heart-fill text-danger me-1"></i>
          Made with love for productivity
        </span>
      </div>
    </footer>
  </body>
</html>
